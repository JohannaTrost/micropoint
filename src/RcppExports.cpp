// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// solpositionCpp
std::vector<double> solpositionCpp(double lat, double lon, int year, int month, int day, double lt);
RcppExport SEXP _micropoint_solpositionCpp(SEXP latSEXP, SEXP lonSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP ltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type month(monthSEXP);
    Rcpp::traits::input_parameter< int >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type lt(ltSEXP);
    rcpp_result_gen = Rcpp::wrap(solpositionCpp(lat, lon, year, month, day, lt));
    return rcpp_result_gen;
END_RCPP
}
// solarindexCpp
double solarindexCpp(double slope, double aspect, double zen, double azi, bool shadowmask);
RcppExport SEXP _micropoint_solarindexCpp(SEXP slopeSEXP, SEXP aspectSEXP, SEXP zenSEXP, SEXP aziSEXP, SEXP shadowmaskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type aspect(aspectSEXP);
    Rcpp::traits::input_parameter< double >::type zen(zenSEXP);
    Rcpp::traits::input_parameter< double >::type azi(aziSEXP);
    Rcpp::traits::input_parameter< bool >::type shadowmask(shadowmaskSEXP);
    rcpp_result_gen = Rcpp::wrap(solarindexCpp(slope, aspect, zen, azi, shadowmask));
    return rcpp_result_gen;
END_RCPP
}
// clearskyradCpp
std::vector<double> clearskyradCpp(std::vector<int> year, std::vector<int> month, std::vector<int> day, std::vector<double> lt, double lat, double lon, std::vector<double> tc, std::vector<double> rh, std::vector<double> pk);
RcppExport SEXP _micropoint_clearskyradCpp(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP ltSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP tcSEXP, SEXP rhSEXP, SEXP pkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type year(yearSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type month(monthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type day(daySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tc(tcSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rh(rhSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pk(pkSEXP);
    rcpp_result_gen = Rcpp::wrap(clearskyradCpp(year, month, day, lt, lat, lon, tc, rh, pk));
    return rcpp_result_gen;
END_RCPP
}
// zeroplanedisCpp
double zeroplanedisCpp(double h, double pai);
RcppExport SEXP _micropoint_zeroplanedisCpp(SEXP hSEXP, SEXP paiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type pai(paiSEXP);
    rcpp_result_gen = Rcpp::wrap(zeroplanedisCpp(h, pai));
    return rcpp_result_gen;
END_RCPP
}
// roughlengthCpp
double roughlengthCpp(double h, double pai, double d, double psi_h);
RcppExport SEXP _micropoint_roughlengthCpp(SEXP hSEXP, SEXP paiSEXP, SEXP dSEXP, SEXP psi_hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type pai(paiSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psi_h(psi_hSEXP);
    rcpp_result_gen = Rcpp::wrap(roughlengthCpp(h, pai, d, psi_h));
    return rcpp_result_gen;
END_RCPP
}
// dpsimCpp
double dpsimCpp(double ze);
RcppExport SEXP _micropoint_dpsimCpp(SEXP zeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ze(zeSEXP);
    rcpp_result_gen = Rcpp::wrap(dpsimCpp(ze));
    return rcpp_result_gen;
END_RCPP
}
// dpsihCpp
double dpsihCpp(double ze);
RcppExport SEXP _micropoint_dpsihCpp(SEXP zeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ze(zeSEXP);
    rcpp_result_gen = Rcpp::wrap(dpsihCpp(ze));
    return rcpp_result_gen;
END_RCPP
}
// dphihCpp
double dphihCpp(double ze);
RcppExport SEXP _micropoint_dphihCpp(SEXP zeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ze(zeSEXP);
    rcpp_result_gen = Rcpp::wrap(dphihCpp(ze));
    return rcpp_result_gen;
END_RCPP
}
// satvapCpp
double satvapCpp(double tc);
RcppExport SEXP _micropoint_satvapCpp(SEXP tcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tc(tcSEXP);
    rcpp_result_gen = Rcpp::wrap(satvapCpp(tc));
    return rcpp_result_gen;
END_RCPP
}
// dewpointCpp
double dewpointCpp(double tc, double ea);
RcppExport SEXP _micropoint_dewpointCpp(SEXP tcSEXP, SEXP eaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tc(tcSEXP);
    Rcpp::traits::input_parameter< double >::type ea(eaSEXP);
    rcpp_result_gen = Rcpp::wrap(dewpointCpp(tc, ea));
    return rcpp_result_gen;
END_RCPP
}
// PenmanMonteithCpp
double PenmanMonteithCpp(double Rabs, double gHa, double gV, double tc, double te, double pk, double ea, double em, double G, double erh);
RcppExport SEXP _micropoint_PenmanMonteithCpp(SEXP RabsSEXP, SEXP gHaSEXP, SEXP gVSEXP, SEXP tcSEXP, SEXP teSEXP, SEXP pkSEXP, SEXP eaSEXP, SEXP emSEXP, SEXP GSEXP, SEXP erhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Rabs(RabsSEXP);
    Rcpp::traits::input_parameter< double >::type gHa(gHaSEXP);
    Rcpp::traits::input_parameter< double >::type gV(gVSEXP);
    Rcpp::traits::input_parameter< double >::type tc(tcSEXP);
    Rcpp::traits::input_parameter< double >::type te(teSEXP);
    Rcpp::traits::input_parameter< double >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< double >::type ea(eaSEXP);
    Rcpp::traits::input_parameter< double >::type em(emSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type erh(erhSEXP);
    rcpp_result_gen = Rcpp::wrap(PenmanMonteithCpp(Rabs, gHa, gV, tc, te, pk, ea, em, G, erh));
    return rcpp_result_gen;
END_RCPP
}
// hourtodayCpp
std::vector<double> hourtodayCpp(std::vector<double> hourly, std::string stat);
RcppExport SEXP _micropoint_hourtodayCpp(SEXP hourlySEXP, SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type hourly(hourlySEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(hourtodayCpp(hourly, stat));
    return rcpp_result_gen;
END_RCPP
}
// maCpp
std::vector<double> maCpp(std::vector<double> x, int n);
RcppExport SEXP _micropoint_maCpp(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(maCpp(x, n));
    return rcpp_result_gen;
END_RCPP
}
// mayCpp
std::vector<double> mayCpp(std::vector<double> x);
RcppExport SEXP _micropoint_mayCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mayCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// BigLeafCpp
Rcpp::List BigLeafCpp(DataFrame obstime, DataFrame climdata, std::vector<double> vegp, std::vector<double> groundp, std::vector<double> soilm, double lat, double lon, double dTmx, double zref, int maxiter, double bwgt, double tol, double gmn, bool yearG);
RcppExport SEXP _micropoint_BigLeafCpp(SEXP obstimeSEXP, SEXP climdataSEXP, SEXP vegpSEXP, SEXP groundpSEXP, SEXP soilmSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP dTmxSEXP, SEXP zrefSEXP, SEXP maxiterSEXP, SEXP bwgtSEXP, SEXP tolSEXP, SEXP gmnSEXP, SEXP yearGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vegp(vegpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type groundp(groundpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type soilm(soilmSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type dTmx(dTmxSEXP);
    Rcpp::traits::input_parameter< double >::type zref(zrefSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type bwgt(bwgtSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type gmn(gmnSEXP);
    Rcpp::traits::input_parameter< bool >::type yearG(yearGSEXP);
    rcpp_result_gen = Rcpp::wrap(BigLeafCpp(obstime, climdata, vegp, groundp, soilm, lat, lon, dTmx, zref, maxiter, bwgt, tol, gmn, yearG));
    return rcpp_result_gen;
END_RCPP
}
// weatherhgtCpp
DataFrame weatherhgtCpp(DataFrame obstime, DataFrame climdata, double zin, double uzin, double zout, double lat, double lon, bool yearG);
RcppExport SEXP _micropoint_weatherhgtCpp(SEXP obstimeSEXP, SEXP climdataSEXP, SEXP zinSEXP, SEXP uzinSEXP, SEXP zoutSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP yearGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< double >::type zin(zinSEXP);
    Rcpp::traits::input_parameter< double >::type uzin(uzinSEXP);
    Rcpp::traits::input_parameter< double >::type zout(zoutSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< bool >::type yearG(yearGSEXP);
    rcpp_result_gen = Rcpp::wrap(weatherhgtCpp(obstime, climdata, zin, uzin, zout, lat, lon, yearG));
    return rcpp_result_gen;
END_RCPP
}
// meandtrCpp
double meandtrCpp(std::vector<double> temp);
RcppExport SEXP _micropoint_meandtrCpp(SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(meandtrCpp(temp));
    return rcpp_result_gen;
END_RCPP
}
// adjustdtrCpp
std::vector<double> adjustdtrCpp(std::vector<double> temp, double dtrc);
RcppExport SEXP _micropoint_adjustdtrCpp(SEXP tempSEXP, SEXP dtrcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< double >::type dtrc(dtrcSEXP);
    rcpp_result_gen = Rcpp::wrap(adjustdtrCpp(temp, dtrc));
    return rcpp_result_gen;
END_RCPP
}
// dtr_correctCpp
DataFrame dtr_correctCpp(DataFrame obstime, DataFrame climdata, double zin, double uzin, double zout, double lat, double lon, bool yearG);
RcppExport SEXP _micropoint_dtr_correctCpp(SEXP obstimeSEXP, SEXP climdataSEXP, SEXP zinSEXP, SEXP uzinSEXP, SEXP zoutSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP yearGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< double >::type zin(zinSEXP);
    Rcpp::traits::input_parameter< double >::type uzin(uzinSEXP);
    Rcpp::traits::input_parameter< double >::type zout(zoutSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< bool >::type yearG(yearGSEXP);
    rcpp_result_gen = Rcpp::wrap(dtr_correctCpp(obstime, climdata, zin, uzin, zout, lat, lon, yearG));
    return rcpp_result_gen;
END_RCPP
}
// soilmCpp
std::vector<double> soilmCpp(DataFrame climdata, double rmu, double mult, double pwr, double Smax, double Smin, double Ksat, double a);
RcppExport SEXP _micropoint_soilmCpp(SEXP climdataSEXP, SEXP rmuSEXP, SEXP multSEXP, SEXP pwrSEXP, SEXP SmaxSEXP, SEXP SminSEXP, SEXP KsatSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< double >::type rmu(rmuSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    Rcpp::traits::input_parameter< double >::type pwr(pwrSEXP);
    Rcpp::traits::input_parameter< double >::type Smax(SmaxSEXP);
    Rcpp::traits::input_parameter< double >::type Smin(SminSEXP);
    Rcpp::traits::input_parameter< double >::type Ksat(KsatSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(soilmCpp(climdata, rmu, mult, pwr, Smax, Smin, Ksat, a));
    return rcpp_result_gen;
END_RCPP
}
// CanopyWindCpp
std::vector<double> CanopyWindCpp(double hgt, std::vector<double> paii);
RcppExport SEXP _micropoint_CanopyWindCpp(SEXP hgtSEXP, SEXP paiiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type hgt(hgtSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type paii(paiiSEXP);
    rcpp_result_gen = Rcpp::wrap(CanopyWindCpp(hgt, paii));
    return rcpp_result_gen;
END_RCPP
}
// SmallLeafOne
Rcpp::List SmallLeafOne(double reqhgt, double zref, double lat, double lon, std::vector<double> obsvars, std::vector<double> climvars, std::vector<double> bigleafvars, int maxiters, std::vector<double> wc, std::vector<double> vegp, std::vector<double> paii, std::vector<double> groundp, std::vector<double> tleaf, std::vector<double> tair, std::vector<double> ea, double surfwet, std::vector<double> z, double a0, double a1, double bwgt);
RcppExport SEXP _micropoint_SmallLeafOne(SEXP reqhgtSEXP, SEXP zrefSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP obsvarsSEXP, SEXP climvarsSEXP, SEXP bigleafvarsSEXP, SEXP maxitersSEXP, SEXP wcSEXP, SEXP vegpSEXP, SEXP paiiSEXP, SEXP groundpSEXP, SEXP tleafSEXP, SEXP tairSEXP, SEXP eaSEXP, SEXP surfwetSEXP, SEXP zSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP bwgtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reqhgt(reqhgtSEXP);
    Rcpp::traits::input_parameter< double >::type zref(zrefSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obsvars(obsvarsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type climvars(climvarsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type wc(wcSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vegp(vegpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type paii(paiiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type groundp(groundpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tleaf(tleafSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tair(tairSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ea(eaSEXP);
    Rcpp::traits::input_parameter< double >::type surfwet(surfwetSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type bwgt(bwgtSEXP);
    rcpp_result_gen = Rcpp::wrap(SmallLeafOne(reqhgt, zref, lat, lon, obsvars, climvars, bigleafvars, maxiters, wc, vegp, paii, groundp, tleaf, tair, ea, surfwet, z, a0, a1, bwgt));
    return rcpp_result_gen;
END_RCPP
}
// BelowCanopy
DataFrame BelowCanopy(double reqhgt, double zref, double lat, double lon, DataFrame obstime, DataFrame climdata, DataFrame bigleafvars, int iters, std::vector<double> vegp, std::vector<double> paii, std::vector<double> groundp, double a0, double a1, double bwgt);
RcppExport SEXP _micropoint_BelowCanopy(SEXP reqhgtSEXP, SEXP zrefSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP obstimeSEXP, SEXP climdataSEXP, SEXP bigleafvarsSEXP, SEXP itersSEXP, SEXP vegpSEXP, SEXP paiiSEXP, SEXP groundpSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP bwgtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reqhgt(reqhgtSEXP);
    Rcpp::traits::input_parameter< double >::type zref(zrefSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vegp(vegpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type paii(paiiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type groundp(groundpSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type bwgt(bwgtSEXP);
    rcpp_result_gen = Rcpp::wrap(BelowCanopy(reqhgt, zref, lat, lon, obstime, climdata, bigleafvars, iters, vegp, paii, groundp, a0, a1, bwgt));
    return rcpp_result_gen;
END_RCPP
}
// AboveCanopy
Rcpp::DataFrame AboveCanopy(double reqhgt, double zref, double lat, double lon, DataFrame obstime, DataFrame climdata, DataFrame bigleafvars, std::vector<double> vegp);
RcppExport SEXP _micropoint_AboveCanopy(SEXP reqhgtSEXP, SEXP zrefSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP obstimeSEXP, SEXP climdataSEXP, SEXP bigleafvarsSEXP, SEXP vegpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reqhgt(reqhgtSEXP);
    Rcpp::traits::input_parameter< double >::type zref(zrefSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vegp(vegpSEXP);
    rcpp_result_gen = Rcpp::wrap(AboveCanopy(reqhgt, zref, lat, lon, obstime, climdata, bigleafvars, vegp));
    return rcpp_result_gen;
END_RCPP
}
// AboveCanopyProfile
Rcpp::List AboveCanopyProfile(const std::vector<double>& zregs, double zref, double lat, double lon, DataFrame obstime, DataFrame climdata, DataFrame bigleafvars, const std::vector<double>& vegp);
RcppExport SEXP _micropoint_AboveCanopyProfile(SEXP zregsSEXP, SEXP zrefSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP obstimeSEXP, SEXP climdataSEXP, SEXP bigleafvarsSEXP, SEXP vegpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type zregs(zregsSEXP);
    Rcpp::traits::input_parameter< double >::type zref(zrefSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vegp(vegpSEXP);
    rcpp_result_gen = Rcpp::wrap(AboveCanopyProfile(zregs, zref, lat, lon, obstime, climdata, bigleafvars, vegp));
    return rcpp_result_gen;
END_RCPP
}
// manCpp
std::vector<double> manCpp(std::vector<double> x, int n);
RcppExport SEXP _micropoint_manCpp(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(manCpp(x, n));
    return rcpp_result_gen;
END_RCPP
}
// Belowground
Rcpp::DataFrame Belowground(double reqhgt, DataFrame bigleafvars, std::vector<double> groundp);
RcppExport SEXP _micropoint_Belowground(SEXP reqhgtSEXP, SEXP bigleafvarsSEXP, SEXP groundpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reqhgt(reqhgtSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type groundp(groundpSEXP);
    rcpp_result_gen = Rcpp::wrap(Belowground(reqhgt, bigleafvars, groundp));
    return rcpp_result_gen;
END_RCPP
}
// BelowCanopyProfile
Rcpp::List BelowCanopyProfile(double zref, double lat, double lon, DataFrame obstime, DataFrame climdata, DataFrame bigleafvars, int iters, const std::vector<double>& vegp, const std::vector<double>& paii, const std::vector<double>& groundp, double a0, double a1, double bwgt);
RcppExport SEXP _micropoint_BelowCanopyProfile(SEXP zrefSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP obstimeSEXP, SEXP climdataSEXP, SEXP bigleafvarsSEXP, SEXP itersSEXP, SEXP vegpSEXP, SEXP paiiSEXP, SEXP groundpSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP bwgtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zref(zrefSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vegp(vegpSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type paii(paiiSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type groundp(groundpSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type bwgt(bwgtSEXP);
    rcpp_result_gen = Rcpp::wrap(BelowCanopyProfile(zref, lat, lon, obstime, climdata, bigleafvars, iters, vegp, paii, groundp, a0, a1, bwgt));
    return rcpp_result_gen;
END_RCPP
}
// Atground
Rcpp::DataFrame Atground(double lat, double lon, DataFrame obstime, DataFrame climdata, DataFrame bigleafvars, std::vector<double> vegp, std::vector<double> groundp);
RcppExport SEXP _micropoint_Atground(SEXP latSEXP, SEXP lonSEXP, SEXP obstimeSEXP, SEXP climdataSEXP, SEXP bigleafvarsSEXP, SEXP vegpSEXP, SEXP groundpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vegp(vegpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type groundp(groundpSEXP);
    rcpp_result_gen = Rcpp::wrap(Atground(lat, lon, obstime, climdata, bigleafvars, vegp, groundp));
    return rcpp_result_gen;
END_RCPP
}
// runmodel
Rcpp::DataFrame runmodel(double reqhgt, double zref, double lat, double lon, DataFrame obstime, DataFrame climdata, DataFrame bigleafvars, int iters, std::vector<double> vegp, std::vector<double> paii, std::vector<double> groundp, double a0, double a1, double bwgt);
RcppExport SEXP _micropoint_runmodel(SEXP reqhgtSEXP, SEXP zrefSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP obstimeSEXP, SEXP climdataSEXP, SEXP bigleafvarsSEXP, SEXP itersSEXP, SEXP vegpSEXP, SEXP paiiSEXP, SEXP groundpSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP bwgtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reqhgt(reqhgtSEXP);
    Rcpp::traits::input_parameter< double >::type zref(zrefSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type obstime(obstimeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type climdata(climdataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bigleafvars(bigleafvarsSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vegp(vegpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type paii(paiiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type groundp(groundpSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type bwgt(bwgtSEXP);
    rcpp_result_gen = Rcpp::wrap(runmodel(reqhgt, zref, lat, lon, obstime, climdata, bigleafvars, iters, vegp, paii, groundp, a0, a1, bwgt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_micropoint_solpositionCpp", (DL_FUNC) &_micropoint_solpositionCpp, 6},
    {"_micropoint_solarindexCpp", (DL_FUNC) &_micropoint_solarindexCpp, 5},
    {"_micropoint_clearskyradCpp", (DL_FUNC) &_micropoint_clearskyradCpp, 9},
    {"_micropoint_zeroplanedisCpp", (DL_FUNC) &_micropoint_zeroplanedisCpp, 2},
    {"_micropoint_roughlengthCpp", (DL_FUNC) &_micropoint_roughlengthCpp, 4},
    {"_micropoint_dpsimCpp", (DL_FUNC) &_micropoint_dpsimCpp, 1},
    {"_micropoint_dpsihCpp", (DL_FUNC) &_micropoint_dpsihCpp, 1},
    {"_micropoint_dphihCpp", (DL_FUNC) &_micropoint_dphihCpp, 1},
    {"_micropoint_satvapCpp", (DL_FUNC) &_micropoint_satvapCpp, 1},
    {"_micropoint_dewpointCpp", (DL_FUNC) &_micropoint_dewpointCpp, 2},
    {"_micropoint_PenmanMonteithCpp", (DL_FUNC) &_micropoint_PenmanMonteithCpp, 10},
    {"_micropoint_hourtodayCpp", (DL_FUNC) &_micropoint_hourtodayCpp, 2},
    {"_micropoint_maCpp", (DL_FUNC) &_micropoint_maCpp, 2},
    {"_micropoint_mayCpp", (DL_FUNC) &_micropoint_mayCpp, 1},
    {"_micropoint_BigLeafCpp", (DL_FUNC) &_micropoint_BigLeafCpp, 14},
    {"_micropoint_weatherhgtCpp", (DL_FUNC) &_micropoint_weatherhgtCpp, 8},
    {"_micropoint_meandtrCpp", (DL_FUNC) &_micropoint_meandtrCpp, 1},
    {"_micropoint_adjustdtrCpp", (DL_FUNC) &_micropoint_adjustdtrCpp, 2},
    {"_micropoint_dtr_correctCpp", (DL_FUNC) &_micropoint_dtr_correctCpp, 8},
    {"_micropoint_soilmCpp", (DL_FUNC) &_micropoint_soilmCpp, 8},
    {"_micropoint_CanopyWindCpp", (DL_FUNC) &_micropoint_CanopyWindCpp, 2},
    {"_micropoint_SmallLeafOne", (DL_FUNC) &_micropoint_SmallLeafOne, 20},
    {"_micropoint_BelowCanopy", (DL_FUNC) &_micropoint_BelowCanopy, 14},
    {"_micropoint_AboveCanopy", (DL_FUNC) &_micropoint_AboveCanopy, 8},
    {"_micropoint_manCpp", (DL_FUNC) &_micropoint_manCpp, 2},
    {"_micropoint_Belowground", (DL_FUNC) &_micropoint_Belowground, 3},
    {"_micropoint_Atground", (DL_FUNC) &_micropoint_Atground, 7},
    {"_micropoint_runmodel", (DL_FUNC) &_micropoint_runmodel, 14},
    {"_micropoint_BelowCanopyProfile", (DL_FUNC) &_micropoint_BelowCanopyProfile, 13},
    {"_micropoint_AboveCanopyProfile", (DL_FUNC) &_micropoint_AboveCanopyProfile, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_micropoint(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
